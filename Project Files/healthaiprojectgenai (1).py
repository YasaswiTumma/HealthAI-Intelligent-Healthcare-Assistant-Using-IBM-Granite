# -*- coding: utf-8 -*-
"""HealthAIProjectGenAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uSbJYt9bPgpuXbY6vhXucl1YQ-sDw4Bl
"""

!pip install transformers accelerate torch

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

# Use your Hugging Face token here
from huggingface_hub import login
login("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")  # Replace with your token

model_id = "ibm-granite/granite-3.3-2b-instruct"

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id, torch_dtype="auto", device_map="auto")

# Create a pipeline for inference
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

!pip install gradio transformers huggingface_hub accelerate

import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from huggingface_hub import login
import datetime

# ‚úÖ Login to Hugging Face
login("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")  # Replace with your actual token

# ‚úÖ Load model
model_id = "ibm-granite/granite-3.3-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id, torch_dtype="auto", device_map="auto")
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

# ‚úÖ Define All 4 Functions

def identify_disease(symptoms):
    prompt = (
        f"You are a medical assistant.\n"
        f"Symptoms: {symptoms}.\n"
        f"List 2-3 possible diseases with brief explanations and next steps."
    )
    output = generator(prompt, max_new_tokens=300, do_sample=True)[0]["generated_text"]
    return output.replace(prompt, "").strip()

def home_remedy(disease):
    prompt = f"What are 3-5 natural home remedies for {disease}? Briefly explain each."
    output = generator(prompt, max_new_tokens=300, do_sample=True)[0]["generated_text"]
    return output.replace(prompt, "").strip()

reminders = []

def add_reminder(event, date, time):
    dt = f"{date} {time}"
    reminders.append((event, dt))
    return f"‚úÖ Reminder added: {event} at {dt}"

def get_reminders():
    if not reminders:
        return "No reminders yet."
    return "\n".join([f"üîî {e} at {d}" for e, d in reminders])

def wellness_advice(age, gender, lifestyle):
    prompt = (
        f"User is a {age}-year-old {gender}. Lifestyle: {lifestyle}.\n"
        "Give 3-5 personalized wellness tips."
    )
    output = generator(prompt, max_new_tokens=300, do_sample=True)[0]["generated_text"]
    return output.replace(prompt, "").strip()

# ‚úÖ Gradio Multi-Function App with Tabs

with gr.Blocks(title="HealthAI") as demo:
    gr.Markdown("## üß† HealthAI ‚Äî Your AI-Powered Health Companion")

    with gr.Tabs():
        # Symptom Identifier
        with gr.Tab("ü©∫ Symptom Identifier"):
            symptoms_input = gr.Textbox(label="Enter your symptoms")
            disease_output = gr.Textbox(label="Possible Disease(s)")
            gr.Button("Submit").click(identify_disease, symptoms_input, disease_output)

        # Home Remedies
        with gr.Tab("üåø Home Remedies"):
            disease_input = gr.Textbox(label="Enter Disease Name")
            remedy_output = gr.Textbox(label="Home Remedies")
            gr.Button("Get Remedies").click(home_remedy, disease_input, remedy_output)

        # Reminders
        with gr.Tab("‚è∞ Reminders"):
            title = gr.Textbox(label="Reminder Title")
            date = gr.Textbox(label="Date (YYYY-MM-DD)")
            time = gr.Textbox(label="Time (HH:MM)")
            confirmation = gr.Textbox(label="Result")
            reminder_list = gr.Textbox(label="All Reminders", interactive=False)
            gr.Button("Add Reminder").click(add_reminder, [title, date, time], confirmation)
            gr.Button("Show All").click(get_reminders, outputs=reminder_list)

        # Wellness Advice
        with gr.Tab("üí° Wellness Advice"):
            age = gr.Number(label="Your Age", value=25)
            gender = gr.Dropdown(["Male", "Female", "Other"], label="Gender")
            lifestyle = gr.Textbox(label="Lifestyle (e.g., smoker, sedentary, active)")
            advice_output = gr.Textbox(label="Wellness Tips")
            gr.Button("Get Advice").click(wellness_advice, [age, gender, lifestyle], advice_output)

demo.launch(share=True, debug=True)